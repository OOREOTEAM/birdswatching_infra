pipeline {
    agent any

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['stage_01', 'dev_01'], description: 'Select the environment to deploy')
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select the action to perform apply or destroy')
    }

    environment {
        ENV = "${params.ENVIRONMENT}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                    dir('terraform/environments') {
                        echo "Running Terraform init for ${ENV}"
                        withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'aws_credentials',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                            sh "make init ENV=${ENV}"
                        }
                    }
                }
            }
        }

        stage('Terraform Plan') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                dir('terraform/environments') {
                    echo "Running Terraform plan for ${ENV}"
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws_credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh "make plan ENV=${ENV}"
                    }
                }
            }
        }

        stage('Manual Approval for Apply') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    input(
                        id: 'deploy-approval',
                        message: "Review the Terraform plan. Do you want to apply these changes to the ${ENV} environment?",
                        ok: 'Yes, Apply Changes',
                        cancel: 'No, Abort Pipeline'
                    )
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                dir('terraform/environments') {
                    echo "Applying Terraform changes for ${ENV} environment"
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws_credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh "make apply ENV=${ENV}"
                    }
                }
            }
        }

        stage('Manual Approval for Destroy') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    input(
                        id: 'destroy',
                        message: "You are about to DESTROY the '${ENV}' environment. Continue?",
                        ok: 'Yes, Destroy',
                        cancel: 'No, Abort Pipeline'
                    )
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                dir('terraform/environments') {
                    echo "Destroying Terraform resources for ${ENV}..."
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws_credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh "make destroy ENV=${ENV}"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
